module("Data adapters - Select - current");var SelectData=require("select2/data/select");var $=require("jquery");var Options=require("select2/options");var selectOptions=new Options({});test("current gets default for single",function(e){var d=$("#qunit-fixture .single");var f=new SelectData(d,selectOptions);f.current(function(a){e.equal(a.length,1,"There should only be one selected option");var b=a[0];e.equal(b.id,"One","The value of the option tag should be the id");e.equal(b.text,"One","The text within the option tag should be the text")})});test("current gets default for multiple",function(e){var d=$("#qunit-fixture .multiple");var f=new SelectData(d,selectOptions);f.current(function(a){e.equal(a.length,0,"Multiple selects have no default selection.")})});test("current gets options with explicit value",function(f){var e=$("#qunit-fixture .single");var g=$('<option value="1">One</option>');e.append(g);var h=new SelectData(e,selectOptions);e.val("1");h.current(function(a){f.equal(a.length,1,"There should be one selected option");var b=a[0];f.equal(b.id,"1","The option value should be the selected id");f.equal(b.text,"One","The text should match the text for the option tag")})});test("current gets options with implicit value",function(e){var d=$("#qunit-fixture .single");var f=new SelectData(d,selectOptions);d.val("One");f.current(function(a){e.equal(a.length,1,"There should only be one selected value");var b=a[0];e.equal(b.id,"One","The id should be the same as the option text");e.equal(b.text,"One","The text should be the same as the option text")})});test("select works for single",function(e){var d=$("#qunit-fixture .single-with-placeholder");var f=new SelectData(d,selectOptions);e.equal(d.val(),"placeholder");f.select({id:"One",text:"One"});e.equal(d.val(),"One")});test("multiple sets the value",function(e){var d=$("#qunit-fixture .multiple");var f=new SelectData(d,selectOptions);e.ok(d.val()==null||d.val().length==0,"nothing should be selected");f.select({id:"Two",text:"Two"});e.deepEqual(d.val(),["Two"])});test("multiple adds to the old value",function(e){var d=$("#qunit-fixture .multiple");var f=new SelectData(d,selectOptions);d.val(["Two"]);e.deepEqual(d.val(),["Two"]);f.select({id:"One",text:"One"});e.deepEqual(d.val(),["One","Two"])});test("duplicates - single - same id on select triggers change",function(g){var j=$("#qunit-fixture .duplicates");var h=new SelectData(j,h);var f=$("#qunit-fixture .duplicates option")[2];var i=false;g.equal(j.val(),"one");j.on("change",function(){i=true});h.select({id:"one",text:"Uno",element:f});g.equal(j.val(),"one","The value never changed");g.ok(i,"The change event should be triggered");g.ok(f.selected,"The second duplicate is selected, not the first")});test("duplicates - single - different id on select triggers change",function(g){var j=$("#qunit-fixture .duplicates");var h=new SelectData(j,h);var f=$("#qunit-fixture .duplicates option")[2];var i=false;j.val("two");j.on("change",function(){i=true});h.select({id:"one",text:"Uno",element:f});g.equal(j.val(),"one","The value changed to the duplicate id");g.ok(i,"The change event should be triggered");g.ok(f.selected,"The second duplicate is selected, not the first")});test("duplicates - multiple - same id on select triggers change",function(g){var j=$("#qunit-fixture .duplicates-multi");var h=new SelectData(j,h);var f=$("#qunit-fixture .duplicates-multi option")[2];var i=false;j.val(["one"]);j.on("change",function(){i=true});h.select({id:"one",text:"Uno",element:f});g.deepEqual(j.val(),["one","one"],"The value now has duplicates");g.ok(i,"The change event should be triggered");g.ok(f.selected,"The second duplicate is selected, not the first")});test("duplicates - multiple - different id on select triggers change",function(g){var j=$("#qunit-fixture .duplicates-multi");var h=new SelectData(j,h);var f=$("#qunit-fixture .duplicates-multi option")[2];var i=false;j.val(["two"]);j.on("change",function(){i=true});h.select({id:"one",text:"Uno",element:f});g.deepEqual(j.val(),["two","one"],"The value has the new id");g.ok(i,"The change event should be triggered");g.ok(f.selected,"The second duplicate is selected, not the first")});module("Data adapter - Select - query");test("all options are returned with no term",function(e){var d=$("#qunit-fixture .single");var f=new SelectData(d,selectOptions);f.query({},function(a){e.equal(a.results.length,1,"The number of items returned should be equal to the number of options")})});test("the matcher checks the text",function(e){var d=$("#qunit-fixture .single");var f=new SelectData(d,selectOptions);f.query({term:"One"},function(a){e.equal(a.results.length,1,'Only the "One" option should be found')})});test("the matcher ignores case",function(e){var d=$("#qunit-fixture .single");var f=new SelectData(d,selectOptions);f.query({term:"one"},function(a){e.equal(a.results.length,1,'The "One" option should still be found')})});test("no options may be returned with no matches",function(e){var d=$("#qunit-fixture .single");var f=new SelectData(d,selectOptions);f.query({term:"qwerty"},function(a){e.equal(a.results.length,0,"Only matching items should be returned")})});test("optgroup tags are marked with children",function(e){var d=$("#qunit-fixture .groups");var f=new SelectData(d,selectOptions);f.query({},function(a){e.ok("children" in a.results[0],"The optgroup element should have children when queried")})});test("empty optgroups are still shown when queried",function(e){var d=$("#qunit-fixture .groups");var f=new SelectData(d,selectOptions);f.query({},function(a){e.equal(a.results.length,2,"The empty optgroup element should still be returned when queried");var b=a.results[1];e.equal(b.text,"Empty","The text of the empty optgroup should match the label");e.equal(b.children.length,0,"There should be no children in the empty opgroup")})});test("multiple options with the same value are returned",function(e){var d=$("#qunit-fixture .duplicates");var f=new SelectData(d,selectOptions);f.query({},function(c){e.equal(c.results.length,3,"The duplicate option should still be returned when queried");var a=c.results[0];var b=c.results[2];e.equal(a.id,b.id,"The duplicates should have the same id");e.notEqual(a.text,b.text,"The duplicates do not have the same text")})});test("data objects use the text of the option",function(g){var f=$("#qunit-fixture .duplicates");var i=new SelectData(f,selectOptions);var h=$("<option>&amp;</option>");var j=i.item(h);g.equal(j.id,"&");g.equal(j.text,"&")});test("select option construction accepts id=0 (zero) value",function(g){var j=$("#qunit-fixture .single");var f=[{id:0,text:"Zero Value"}];var h=new SelectData(j,f);var i=h.option(f[0]);g.equal(i[0].value,"0",'Built option value should be "0" (zero as a string).')});test('select option construction accepts id="" (empty string) value',function(g){var j=$("#qunit-fixture .single");var f=[{id:"",text:"Empty String"}];var h=new SelectData(j,f);var i=h.option(f[0]);g.equal(i[0].value,"","Built option value should be an empty string.")});test("user-defined types are normalized properly",function(p){var o=$("#qunit-fixture .user-defined"),k=function(a,b){var c=this;c.id=a;c.text=b;return c};var n=["Test",{id:4,text:"item"},new k(1,"aaaaaa")];var m=new SelectData(o,selectOptions);var l=m._normalizeItem(n[0]);var i=m._normalizeItem(n[1]);var j=m._normalizeItem(n[2]);p.equal(n[0],l.id,"id property should be equal to text after normalize");p.equal(n[0],l.text,"text property should be equal after normalize");p.equal(n[1].id,i.id,"id property should be equal after normalize");p.equal(n[1].text,i.text,"text property should be equal after normalize");p.equal(n[2].id,j.id,"id property should be equal after normalize");p.equal(n[2].text,j.text,"text property should be equal after normalize")});